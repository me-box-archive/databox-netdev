doctype html
html
	head
		meta(charset='utf-8')
		meta(name='viewport', content='width=device-width, initial-scale=1')
		meta(name="theme-color", content="#00838F")
		title Databox Slayer
		link(rel='stylesheet', href='https://fonts.googleapis.com/icon?family=Material+Icons')
		link(rel='stylesheet', href='/styles/databox.css')
		link(rel="icon", type="image/png", sizes="192x192", href="/icons/android-icon-192x192.png")
		link(rel="icon", type="image/png", sizes="32x32", href="/icons/favicon-32x32.png")
		link(rel="icon", type="image/png", sizes="96x96", href="/icons/favicon-96x96.png")
		link(rel="icon", type="image/png", sizes="16x16", href="/icons/favicon-16x16.png")
		script(src='https://code.jquery.com/jquery-3.1.0.min.js')
		script(src='https://code.getmdl.io/1.2.1/material.min.js', defer)
		script(src='/templates/app-manifest.js')

	body.mdl-layout.mdl-js-layout.mdl-layout--fixed-header
		header.mdl-layout__header
			a.mdl-layout-icon.mdl-button.mdl-js-button.mdl-button--icon(href="/")
				i.material-icons
					| arrow_back
			div.mdl-layout__header-row
				span.mdl-layout-title
					| #{appname}
		main.mdl-layout__content#content
			div.mdl-spinner.mdl-js-spinner.is-active

		script.
			var manifest = null;
			var sensors = null;
			var mappings = {
				"urn:X-hypercat:rels:hasDescription:en": "description",
				"urn:X-hypercat:rels:isContentType": "contentType",
				"urn:X-databox:rels:hasVendor": "vendor",
				"urn:X-databox:rels:hasType": "type",
				"urn:X-databox:rels:hasLocation": "location",
				"urn:X-databox:rels:hasDatasourceid": "id"
			}

			$.post("/store/app/get/", {'name': '#{appname}'}, function (data) {
				manifest = data.manifest;
				if ('packages' in manifest && manifest.packages.length > 0) {
					manifest.packages[0].enabled = true;
				}
				if('datasources' in manifest && manifest.datasources.length > 0) {
					$.get("/databox-arbiter/cat", function (data) {
						if ('items' in data) {
							for (var item of data.items) {
								var link = document.createElement("a");
								link.href = item.href;
								openCatalogue("/" + link.hostname + "/cat")
							}
						}
					});
				}

				update();
			});

			function openCatalogue(url) {
				$.get(url, function (data) {
					if ('items' in data) {
						for (var item of data.items) {
							var sensor = {};
							sensor.endpoint = item.href;
							if ('item-metadata' in item) {
								for (var metadata of item['item-metadata']) {
									if (metadata.rel in mappings) {
										var mapped = mappings[metadata.rel];
										sensor[mapped] = metadata.val;
									}
								}
							}

							//add the full hypercat item to pass to the app
							sensor.hypercat = item;

							console.log(sensor);
							if (sensors == null) {
								sensors = [sensor];
							}
							else {
								sensors.push(sensor);
							}
							update();
						}
					}
				});
			}

			function update() {
				if (manifest != null) {
					$('#content').html(template({
						manifest: manifest,
						sensors: sensors
					}));
					componentHandler.upgradeAllRegistered();
				}
			}

			function selectSensor(datasource_id, sensor_id) {
				for (var datasource of manifest.datasources) {
					if (datasource.clientid === datasource_id) {
						for (var sensor of sensors) {
							if (sensor.id === sensor_id) {
								datasource.datasource = sensor.id;
								datasource.endpoint = sensor.endpoint;
								datasource.description = sensor.description;
								datasource.location = sensor.location || "";
								if(sensor.location) {
									datasource.description +=  ", " + sensor.location
								}
								datasource.hypercat = sensor.hypercat;
								update();
								return true;
							}
						}
					}
				}
				return true;
			}

			function togglePackage(index) {
				var pack = manifest.packages[index];
				pack.enabled = !pack.enabled;
				update();
				return true;
			}

			function installApp() {
				$.post("/install", {"sla": JSON.stringify(manifest)}, function (data) {
					console.log(data);
				});
				window.location.href = "/";
			}